import { jsx as _jsx } from "react/jsx-runtime";
import { prebuild } from '@mintlify/prebuild';
import fse, { pathExists } from 'fs-extra';
import isOnline from 'is-online';
import { CLIENT_PATH, DOT_MINTLIFY, CMD_EXEC_PATH, VERSION_PATH, NEXT_PUBLIC_PATH, NEXT_PROPS_PATH, } from '../constants.js';
import { addLog, clearLogs } from '../logging-state.js';
import { ErrorLog, SpinnerLog, UpdateLog, WarningLog } from '../logs.js';
import { getTargetMintVersion, downloadTargetMint } from './client.js';
import { run } from './run.js';
const dev = async (argv) => {
    const hasInternet = await isOnline();
    const localSchema = argv['local-schema'];
    const clientVersion = argv['client-version'];
    const packageName = argv.packageName;
    const groups = argv.groups;
    await fse.ensureDir(DOT_MINTLIFY);
    const versionString = (await pathExists(VERSION_PATH))
        ? fse.readFileSync(VERSION_PATH, 'utf8')
        : null;
    if (!versionString && !hasInternet) {
        clearLogs();
        addLog(_jsx(ErrorLog, { message: `running ${packageName} dev after updating requires an internet connection.` }));
        await new Promise((resolve) => setTimeout(resolve, 50));
        process.exit(1);
    }
    const targetMintVersion = await getTargetMintVersion();
    if (!targetMintVersion) {
        addLog(_jsx(WarningLog, { message: `failed to retrieve latest version. Your current version is: ${versionString?.trim()}, which may not be the latest version.` }));
    }
    // update the client if the user has provided a version with --client-version
    // or if there is no version and there is internet and the target version is available
    if (clientVersion !== undefined || (!versionString && hasInternet && targetMintVersion)) {
        const version = clientVersion ?? targetMintVersion;
        if (version) {
            await downloadTargetMint({
                targetVersion: version,
                existingVersion: versionString,
            });
        }
    }
    if (versionString && targetMintVersion && versionString.trim() !== targetMintVersion.trim()) {
        addLog(_jsx(UpdateLog, { updateCommand: `${packageName} update` }));
    }
    // clear preexisting prebuild files
    fse.emptyDirSync(NEXT_PUBLIC_PATH);
    fse.emptyDirSync(NEXT_PROPS_PATH);
    process.chdir(CLIENT_PATH);
    try {
        clearLogs();
        addLog(_jsx(SpinnerLog, { message: "preparing local preview..." }));
        await prebuild(CMD_EXEC_PATH, { localSchema, groups });
    }
    catch (err) {
        clearLogs();
        const errorText = err instanceof Error && err.message ? err.message : 'prebuild step failed';
        addLog(_jsx(ErrorLog, { message: errorText }));
        await new Promise((resolve) => setTimeout(resolve, 50));
        process.exit(1);
    }
    await run(argv);
};
export default dev;
